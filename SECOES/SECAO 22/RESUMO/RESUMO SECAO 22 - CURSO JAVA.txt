-- RESUMO SEÇÃO 22 - JAVA EE MAPEAMENTO OBJETO-RELACIONAL COM JPA/HIBERNATE - DO CURSO JAVA COMPLETO 2023 PROGRAMAÇÃO ORIENTADA A OBJETOS + PROJETOS --

JAVA EE -> JAVA ENTERPRISE EDITOR, QUE E UM CONJUNTO DE ESPECIFICACOES, JPA E A MAIS IMPORTANTE, ELA E A BIBLIOTECA PADRAO DE PERSISTENCIA DE DADOS EM JAVA BASEADO NO PRINCIPIO OBJETO-RELACIONAL O HIBERNATE E UMA IMPLEMENTACAO MAIS POPULAR, USAR JPA (INTERFACE/ESPECIFICACAO) HIBERNATE(IMPLEMENTACA)

PARA ESSA SECAO DEVEMOS INSTALAR:

1- STS -> PARA INSTALAR ESSA FERRAMENTA BASTA DIGITAR STS INSTALL NO GOOGLE PRIMEIRO LINK, SERA USADO PARA CRIAR APIS, ROTAS, ETC.
2- POSTMAN -> PARA INSTALAR ESSA FERRAMENTA DEVEMOS UTILIZAR O HOMEBREW NO MACOS, SERA USADO PARA TESTAR ROTAS

VISAO GERAL DE MAPEAMENTO OBJETO-RELACIONAL:
O PROBLMA BASICO QUE EXISTE POR TRAS DO ASSUNTO MAPEAMENTO OBJETO-RELACIONAL, JPA  E OUTRAS FERRAMENTAS E O SEGUINTE, POR VARIOS ANOS A MAIOR DIFICULDADE DE SE USAR A ABORDAGEM ORIENTADA A OBJETOS E A COMUNICACAO COM O BANCO DE DADOS RELACIONAL.
POIS O BANCO DE DADOS NAO E ORIENTADO A OBJETOS, ELE POSSUI OUTRO PARADIGMA QUE E O PARADIGMA RELACIONAL.

QUANDO TEMOS UM SISTEMAS OO COM AS CLASSES ASSOCIADAS, ETC, QUAND TRABALHARMOS COM O BD, A GENTE TINHA QUE FAZER UM ESFORCO ENORME PARA TRANSFORMAR A INTERACAO DOS PARADIGMAS DE DIFERENTES.
TODA HORA TEM QUE FICA TRANSPORTANDO DA TABELA PARA O OBJETO E VICE-VERSA, OU SEJA, FICAR TRADUZIANDO DO BD PARA OO E DE OO PARA BD
POIS TODA HORA TEM QUE FICAR BUSCANDO NO BD, E CONVERTENDO TODOS OS CAMPOS DA TABELA PRA O TIPO DA VARIAVEL DO OBJETO, FAZENDO COM QUE TENHA QUE CODAR TODA VEZ ISSO
SEGUNDO MARTIN FOWLER 30% DO ESFORCO DO SISTEMA ERA PROGRAMANDO A PARTE DE ACESSO A DADOS, A TRADUCAO DE TABELA PARA OBJETO.

ALEM DA QUESTAO DE TRADUZIR, DEVE-SE TRARTADOS ALGUNS OUTROS PROBLEMAS COMO:
- CONTEXTO DE PERSISTENCIA DE DADOS(OBJETOS QUE ESTAO OU NAO ATRELADOS A UMA CONEXAO EM UM DADO MOMENTO)
- MAPA DE INDENTIDADE (CACHE DE OBJETOS JA CARREGADOS), POIS UMA VEZ QUE SE BUSCA NO BD, JA TEMOS O OBJETO INSTANCIADO EM MEMORIA, ONDE EM OO COMO JA TEMOS INSTANCIADO NAO PRECISAMOS IR NO BD DENOVO JA TEMOS NA MEMORIA O OBJTO
- CARREGAMENTO TARDIO (LAZY LOADING) CARREGAR APENAS NECESSARIO
- OUTROS

TUDO ISSO ANTES FEITO A MAO PELOS PROGRAMADORES, COM O SURGIMENTO DAS FERRAMENTAS OBJETO-RELACIONAL FAZ ISSO AUTOMATICAMENTE PARA GENTE
O MAPEAMENTO OBJETO-RELACIONAL VEIO PARA MELHOAR A COMUNICACAO DE UM SISTEMA OO COM O BD RELACIONAL.

JPA:
JAVA PERSISTENCI API(JPA) E A ESPECIFICACAO PADRAO DA PLATAFORMA JAVA EE (PACOTE JAVAX.PERSISTENCE) PARA MAPEAMENTO OBJETO RELACIONAL

JPA E APNAS UMA ESPECIFICACAO(JSR338):
http://download.oracle.com/otn-pub/jcp/persistence-2_1-fr-eval-spec/JavaPersistence.pdf

PARA TRABALHAR COM JPA E PRECISO INCLUIR NO PROJETO UMA IMPLEMENTACAO DA API(EXEMPLO: HIBERNATE E A MAIS USADA)

ARQUITETURA DE UMA APLICACAO QUE UITLIZA JPA:

TEMOS UMA APLICACAO, ONDE QUEREMOS TER OBJETOS PERSISTENTE, TEREMOS A APLICACAO, LOGO DEPOIS TEREMOS OS OBJETOS PERSISTENTES COMO PRODUTO, ETC, E NO MEIO DO CAMINHO TEM A JPA QUE FAZ O MEIO DE CAMPO ENTRE OS OBJETOS E O BD.
PARA A JPA FUNCIONAR, DEVEMOS TER UM MAPEAMENTO DOS OBJETOS E ALGUMAS CONFIGURASCOES PARA A JPA FUNCONAR

A JPA POSSUI 2 PRINCIPAIS CLASSES QUE SAO:

1- ENTITYMANAGER:
UM OBJETO ENTITYMANAGER ENCAPSULA UMA CONEXAO COM A BASE DE DADOS E SERVE PARA EFETUAR OPERACOES DE ACESSO A DADOS(INSERCAO, REMOCAO, DELECAO, ATUALIZACAO) EM ENTIDADES(CLIENTES, PRODUTOS, PEDIDOS, ETC) POR ELA MONITORADAS EM UM MESMO CONTEXTO DE PERSISTENCIA
ESCOPO: TIPICAMENTE MANTEM-SE UMA INSTANCIA UNICA DE ENTITYMANAGER PARA CADA THREAD DO SISTEMA (NO CASO DE APP WEB, PARA CADA REQUISICAO DO SISTEMA)

OBS1: O ENTITYMANAGER E UM TIPO DE CONEXAO COM O BD A GROSSO MODO, E OPERACOES DE ACESSO A DADOS
OBS2: O ENTITYMANAGER MONITORA AS ENTIDADES, ELE MONITORA OS OBJETOS INSTANCIADOS
OBS3: O ENTITYMANAGER PARA APP WEB E INSTANCIADO UMA UNICA VEZ PARA TRABALHAR COM TODOS OS DADOS DAQUELA CONEXAO COM UM USUARIO

2- ENTITYMANAGERFACTORY:
UM OBJETO ENTITYMANAGERFACTORY E UTILIZADO PARA INSTANCIAR OBJETOS ENTITYMANAGER
ESCOPO: TIPICAMENTE MANTEM-SE UMA INSTANCIA UNICA DE ENTITYMANAGERFACTORY PARA TODA A APLICACAO

INCLUINDO JPA PARA PERSISTIR OS OBJETOS EN BD:

PARA ISSO PRECISAMOS CRIAR UM PROJETO MAVEN PARA TRABALHAR COM JPA, O MAVEN E UM GERENCIADOR DE DEPENENCIAS E BUILD DO JAVA
DEVEMOS CRIAR NO O PROJETO MAVEN NO PROPRIO PROJETO QUE ESTAMOS TRABALHANDO
DEVEMOS DEFINIR O NOME PARA O GROUPID E PARA O ARTIFACTID
- GROUPID -> COSTUMA SER O PACOTE DA EMPRESA
- ARTIFACTID -> NOME DO PROJETO

OBS1: PODEMOS ADICIONAR NOME E DESCRICAO POREM SAO OPCIONAIS
OBS2: UM PROJETO PODE DERIVAR DE OUTRO, E POSSIVEL FAZER A REFERENCIA


O PROJETO MAVEN POSSUI UMA ESTRUTURA PADRAO.
OS CODIGOS CFONTES FICAM NA PASTA SRC/MAIN/JAVA
POR PADRAO O MAVEN CRIA AS PASTAS DE RECURSOS E TESTES

OBS1: NO MAVEN AO BAIXAR AS DEPENDENCIAS, DEVEMOS SABER OS NOMES E AS VERSOES DA DEPENDENCIA, BASTA PESQUISAR NA NET O NOME DA DEPENENCIA MAVEN
OBS2: AO SALVAR O ARQUIVO PORM.XML COM AS DEPENDENCIA, O MESMO IRA BAIXAR E INSTALAR AS DEPENDENCIAS 

PARA CONFIGURA O JPA NO PROJETO, PRECISAMOS DO ARQUIVO PERSISTENCE.XML, VISTO QUE PROJETOS JPA POSSUEM ARQUIVOS DE CONFIGURACAO
PARA CRIARMOS ESSE ARQUIVO, DEVEMO SEGUIR AS SEGUINTES ETAPAS
1- CRIAR A PASTA META-INF A PARTIR DA PASTA SRC/MAIN/RESOURCE
2- DENTRO DA PASTA META-INF CRIAR UM ARQUIVO PERSISTENCE.XML
3- COLOCAR O CONTEUDO DO ARUIVO PERSISTENCE.XML, ONDE ESSE CONTEUDO E COMPOSTO POR UMA DEFINICAO DA CONFIG DO JPA, UM ELEMENTO CHAMADO PERSISTENCE UNIT PODEMOS COLOCAR APELIDO NESSA PERSISTENCE COM A TAG NAME, A TAG TRANSACTIONTYPE FALA COMO GERENCIAMOS A TRANSACOES
DEFINIMOS AS PROPRIEDADES DO PERSISTENCE UNITY, ONDE PASSAREMOS A CONEXAO COM O BD, DEPOIS TEM A PROPRIEDADE DO  DRIVE, DEPOIS A PRORIADADE DO USERNAME, DEPOIS A PORPIEDADE DE SENHA, TAMBEM TEMOS A PRPORIEDADE DE CREATE E ATUALIZACAO DE BD ISSO E PARA GERAR AUTOMATICAMENTE O BD, SEMPRE QUE RODAR A APP O DB E ATUALIZADO AUTOMATICAMENTE E POR ULTIMO O DIALETO DO DB DEVE-SE VERIFICAR AO CERTO O NOME

MAPEAMENTOS DE CLASSE DE DOMINIO -> ESSE MAPEAMENTO SERVE PARA LITERALMENTE MAPEAR AS CLASSES DO QUE SAO TABELAS O QUE SAO ATRIBUTOS, ETC.
PARA CRIAR MAPEAMENTOS, DEVEMOS COLOCAR O @ENTITY NA CLASSE QUE REPRESENTA UMA ENTIDADE NO DB E @ID NO ATRIBUTO QUE CORRESPONDE A CHAVE PRIMARIA E UM COMANDO QUE GERA AUTOMATICAMENTE DO BD

OBS1: O ORG.HIBERNATE E A IMPLEMENTACAO HIBERNATE DO JPA
OBS2: JAVAX.PESISTENCE AUTOMATICAMENTE BUSCA APLICACAO DO HIBERNATE, SEMPRE BOM USAR O JAVAX.PERSISTENCE PARA QUE SEJA GARANTIDO QUE ESTEJA ATENDENDO AS EPECIFICACAO DO JPA E NAO DE ALGO A MAIS
OBS3: AO USARO O @COLUMN PODEMOS MUDAR O NOME DA COLUNA NO BD AO INSTANCIAR O MESMO, POREM MELHOR USAR O NOME DAS VARIAVEIS POR PADRAO

O JPA TRABALHA DO SEGUINTE MODO:
DEVEMOS INSTANCIAR UM ENTITYMANAGER, PRIMEIRAMENTE INSTANCIA-SE UM ENTITYMANAGERFACTOR EMF = PERSISTENCE.CREATEENTITYMAGNERFACTORE(NOME_PERSISTENCE_UNIT)
APOS INSTNCIAR UM ENTITYMANAGERFACTOR, PODEMOS INSTANCIAR UM ENTITYMANAGER ATRAVES DO COMPANDO EMF.CREATEENTITYMAGNER, EMF E UM ENTITYMANAGERFACTORY

OBS1: O NOME_PERSISTENCE E O QUE DEFINIMOS NO PERSISTENCIT-UNIT

PARA SALVAR OS OBJETOS NO BD USAMOS O COMANDO PERSIST()

OBS1: PARA ISSO PRECISA FAZER UMA TRASACAO, UTILIZAMOS O GETTRANSATION.BEGIN() PARA INICAR E GETTRANSATION().COMMIT() PARA FECHAR UMA TRANSACAO

SIMPLES ACESSO A DADOS COM FERRAMENTAS DE OBJETO-RELACIONAL, TANTO PARA INSERIR QUANTO PARA RECUPERAR APENAS 1 LINHA, ANTES ERA MUITO LONGO PARA ATRIBUIR OS VALORES DOS ATRIBUTOS, O JPA FAZ TUDO

OBS1: DEVEMOS FECHAR PRIMEIRO O ENTITYMANAGER E DEPOIS O ENTITYMANAGERFACTOR
OBS2: O FIND ACHA UM OBJETO PELO ID NA TABELA DO BD


PARA REMOCAO UTILIZAMOS O REMOVE.

OBS1: O JPA SO CONSEGUE REMOVER OBJETOS QUE ESTAO MONITORADOS, POR EXMPLO SE INSTANCIARMOS UM OBJETO NA MAO QUE NAO FOI RECUPERADO DO BD ELE NAO DEIXA DA UM ERRO, POIS A INSTANCIA ESTA DESTACADA DO BD
OBS2: PARA USAR O REMOVE DEVE-SE UTILZIAR O GETTRANSATION.BEGIN E GETTRANSATION.COMMIT
OBS3: QUAISQUER ACAO QUE NAO SEJA UMA CONSULTA DEVE-SE COLOCAR TRANSACAO

UM OBJETO MONITORADO OU E UM OBJETO QUE VOCE ACABOU DE INSERIR OU ENTAO E UM OBJETO QUE FOI RECUPERADO DO DB E O ENTITYMANAGER NAO FOI FECHADO

