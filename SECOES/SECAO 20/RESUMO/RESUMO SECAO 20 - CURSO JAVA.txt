-- RESUMO SEÇÃO 20 - PROGRAMACAO FUNCIONAL E EXPRESSOES LAMBDA - DO CURSO JAVA COMPLETO 2023 PROGRAMAÇÃO ORIENTADA A OBJETOS + PROJETOS --

TOPICO IMPORTANTE, POIS PODE DEIXAR O CODIGO MAIS EXPRESSIVO

UMA EXPERIENCIA COM COMPARATOR(INTERFACE FUNCIONAL DO JAVA 8):
PROBLEMA:
- PODEMOS IMPLEMNTAR A COMPARACAO DE OBJETOS POR MEIO DA INTERFACE COMPARABLE<NOME_CLASSE>
OBS1: O COLLECTIONS.SORT PRECISA QUE A CLASSE QUE SEJA O TIPO DA LISTA TENHA IMPLEMENTADO A CLASSE COMPARABLE E SEU METODO COMPARE TO

- POREM DESSA FORMA NOSSA CLASSE NAO FICA FECHADA PARA ALTERACAO: SE O CRITERIO DE COMPARACAO MUDAR, PRECISAMOS ALTERAR A CLASSES
OBS1: DEVE-SE MUDAR A CLASSE QUE TEM A LOGICA DE CRITERIO DE COMPARACAO E EM TERMOS DE MANUTENCAO E INDESEJAVEL

- PODEMOS ENTAO USAR O METODO DEFAULT "SORT" DA INTERFACE LIST:
default void sort(Comparator<? super E> c)
OBS1: NAO E NECESSARIO A IMPLEMENTACAO DO COMPARABLE NESSE CASO

COMPARATOR: E UMA INTERFACE FUNCIONAL(INTERFACE QUE TEM APENAS 1 METODO, PODE TER METODO DEFAULT E ESTATICO, POREM APENAS 1 METODO A SER IMPLEMENTATO O COMPARE)
DEVE-SE CRIAR UMA CLASSE QUE IMPLEMENTA COMPARATOR<NOME_OBJ>
AO FAZE ISSO IMPLEMENTA-SE O METODO COMPARE, ONDE DEVEOS DELEGAR A LOGICA DE COMPARACAO E RETORNA UM INTEIRO, 1 SE 1 FOR MAIOR QUE O 2, 0 SE AMBOS FOREM IGUAL E -1 CASO O 2 FOR MAIOR QUE O 1
OBS1: AO USAR O LIST SORT, DEVEMOS INSTANCIAR UM COMPARATOR
OBS2: PODEMOS UTILIAR VARIAS FORMAS DE DEFINIR UM COMPARATOR NO SORT

OUTRO EXEMPLO, INSTANCIAR UM OBJETO COMPARATOR DE CLASSE ANONIMA:
CRIAMOS UMA VARIAVEL COMPARATOR<TIPO_OBJ> NOME_COMP = NEW COMPARATOR<TIPO_OBJ>{IMPLEMENTA A LOGICA}, POREM E MUITO LONGA E VERBOSA
PODEMOS CRIAR UMA EXPRESSAO LAMBIDA, QUE E UMA FUNCAO ANONIMA ATRAVES DE (PARAMETROS)->{IMPLEMENTA A LOGICA};
OBS1: EXPRESSOES LAMBIDAS TAMBEM SAO CONHECIDAS COMO ARROW FUNCTION
OBS2: E OPICIONAR EXPLICAR QUAL E O TIPO DO PARAMETRO, POIS O COMPILADOR FAZ UMA INFERENCIA DE TIPOS
OBS3: PODEMOS ABREVIAR MAIS A EPXRESSAO CITADA ACIMA, TIRANDO AS {} E O RETURN
OBS4: PODEMOS INSTANCIAR UMA EXPRESSAO LAMBIDA NO CONSTRUTOR DE UM COMPARETOR NO SORT

PROGRAMACAO FUNCIONAL E CALCULO LAMBDA:
PARADIGMAS DE PROGAMACAO:
- IMPERATIVO(C, PASCAL, FORTRAN, COBOL)
- ORIENTADO A OBJETOS(C++, OBJECT PASCAL, JAVA(<8), C#(<3))
- FUNCIONAL(HASKELL, CLOSURE, CLEAN, ERLAND)
- LOGICO(PROLOG)
- MULTIPARADIGMA(JS, JAVA(8+), C#(3+), RUBY, PYTHON, GO) -> OO E FUNCIONAL

BASEADO NO FORMALISMO MATEMATIO CALCULO LAMBDA(CHURCH 1930)

COMO SE DESCREVE ALGO A SER COMPUTADO(*): PI(COMANDOS (EXPLICA "COMO" FAZER ALGO - IMPERATIVA)) | PF(EXPRESSOES("O QUE" DEVE SER FEITO - DECLARATIVA))
FUNCOES POSSUEM TRANSPARENCIA REFERENCIAL(AUSENCIA DE EFEITOS COLATERIAS): PI(FRACO) | PF(FORTE)
OBJETOS IMUTAVEIS(*): PI(RARO) | PF(COMUM) -> VALORES NAO MUDAM
FUNCOES SAO OBJETOS DE PRIMEIRA ORDEM: PI(NAO) | PF(SIM)
EXPRESSIVIDADE/CODIGO CONCISCO: PI(BAIXA) | PF(ALTA) -> CODIGO CONSISO, MAIS RESUMIDO POSSIVEL
TIPAGEM DINAMICA/INFERENCIA DE TIPOS: PI(RARO) | PF(COMUM) -> O COMPILADOR FAZ A INFERENCIA DE TIPO

OBS1: PI(PROGRAMACAO IMPERATIVA) PF(PROGRAMCAO FUNCIONAL)
OBS2: MARCADOS COM * SERAO ABORDADOS MAIS A FRENTE NO CURSO

TRANSPARENCIA REFERENCIAL -> UMA FUNCAO POSSUI TRANSPARENCIA REFERENCIAL SE SEU RESULTADO FOR SEMPRE OS MESMO PARA OS MESMO DADOS DE ENTRADA, OU SEJA, CONSEGUE PREVER, POREMCASO A FUNCAO ACESSE A DADOS EXTERNOS NAO E POSSIVEL TER ESSE CONTROLE
BENEFICIOS: SIMPLICIDADE E PREVISIBILIDADE

OBS1: VALORES INFLUENCIAL NA TRANSPARENCIA REFERENCIAL, POIS ENTRADAS DIFERENTES GERAM VALORES DIFERENTES
OBS2: NA PROG IMPERATIVA NAO TEM ISSO, MAS PODEM SER IMPLEMENTDOS

OBJETOS DE PRIMEIRA ORDEM(PRIMEIRA CLASSE)-> ISSO SIGNIFICA QUE FUNCOES PODEM POR EXEMPLO SEREM PASSADAS COMO PARAMETRO DE MATODOS, BEM COMO RETORNADAS COMO RESULTADO DE METODOS
OBS1: UTILIZAMOS "METHOD REFERENCES" OPERADOR:: SINTAXE CLASSE::METODO EX: LIST.SORT(NOME_CLASSE::NOME_METODO)
OBS2: NA FUNCAO IMPERATIVA NAO TEMOS FUNCOES DE PRIMEIRA ONDERM

Expressividade / código conciso
Integer sum = 0;
for (Integer x : list) {
sum += x;
}
vs.
Integer sum = list.stream().reduce(0, Integer::sum); -> DEIXA O CODIGO MAIS RESUMIDO

EXPRESSOES LAMBIDAS CORRESPONDE A UMA FUNCAO ANONIMA DE PRIMEIRA CLASSE, NO CONTEXTO DE PROG FUNCIONAL, OU SEJA UMA FUNCAO QUE NAO FOI DECLADARA, NAO POSSUI NOME E E DEPRIMEIRA CLASSE

OBS1: CALCUL LAMBDA -> FORMALISMO MATEMATICA BASE DA PROGRAMCAO FUNCIONAL
OBS2: EXPRESSAO LAMBDA -> FUNCAO ANOMIMA DE PRIMEIRA CLASSE

INTERFACE FUNCIONAL -> E UMA INTERFACE QUE POSSUI UM UNICO METODO ABSTRATO, SUAS IMPLEMENTACOES SERAO TRATADAS COMO EXPRESSOES LAMBIDAS, COMO FIZEMOS CRIANDO UMA CLASSE IMPLEMENTADO A INTERFACE COMPARATOR NO EXEMPLO DA AULA
OBS1: A INTERFACE FUNCIONAL ELA TEM UM MAPEAMENTO DIRETO COM A EXPRESSAO LAMBIDA, FAZENDO COM QUE NO FUNDO A EXPRESASO LAMBIDA SEJA TRATADA COMO UMA INTERFACE FUNCIONAL
OBS2: EM LINGUAGEM FUNCIONAL PURA O EXEMPLO DE INTERFACE FUNCIONAL NAO FUNCIONA, MAS COMO JAVA MANTEVE SEUS PILARES DE OO, MANTEVE ESSA EQUIVALENCIA

NO JAVA TEMOS VARIAS INTERFACES FUNCIONAIS, AS MAIS COMUMNS SAO:
- PREDICATE -> PREDICADO USADO EM ALGUMAS FUNCOES DE COLECOES 
- FUNCTION 
- CONSUMER -> PORQUE O METODO ABSTRADO DA INTERFACE FUNCONAL CONSUMER E UM RETORNO DO TIPO VOID, E SIMPLESMENTE FAZ ALGUMA ACAO, NESSE CASO PODE CAUSA EFEITOS COLATERAIS
OBS1: AO CONTRARIO DAS OUTRAS INTERFACES FUNCIONAIS, NO CASO DO CONSUMER, E ESPERADO ELE POSSA GERAR EFEITOS COLATERAIS
OBS2: SEMPRE QUE MECHERMOS COM EXPRESSOES LAMBIDAS ESTAMOS USANDO INTERFAE FUNCIONAL

PREDICATE -> E UMA INTREFACE GENERICA PARAMETRIZADA COM O TIPO T, E UM METODO ABSTRATO CHAMADO TESTE E RETORNA TRUE OR FALSE
OBS1: PREDICATE SAO DO PACOTE UTIL
OBS2: DEVE-SEMPRE IMPLEMNTAR O CONTRATO DA INTERFACE, QUE NO CASO E O TEST

PARA IMPLEMENTAR O PEDICATE, TEMOS VARIAS VERSOES QUE SAO:
- IMPLEMNTACAO DA INTERFACE -> UMA CLASSE IMPLEMENTA A INTERFACE PREDICATE<NOME_CLASSE>
- REFERENCE METHOD COM METODO ESTATICO -> USANDO NOME_CLASSE::NOME_METHOD
- REFERENCE METHOD COM METODO NAO ESTATICO -> USANDO NOME_CLASSE::NOME_METHOD, UNICA DIFERENCA E NA HORA DE PROGRAMAR O METODO, POIS NO METODO STATICO TRABALHA COM UM OBJETO PASSADO POR PARAMETRO E N METODO NAO ESTATICO TRABALHA COM O PROPRIO OBJETO INSTANCIADO
- EXPRESSAO LAMDA DECLARADA -> QUANDO CRIARMOS UMA VARIAVEL DO TIPO PEDICATE E USSAMOS A ARROW FUNCTION(EXPRESSAO LAMBIDA) E A LOGICA, PODENDO COLOCAR VALORES PARAMETRIZADOS
- EXPRESSAO LAMBDA INLINE -> FAZ O PROCEDIMENTO EM CIMA, SO QUE DIRETAMENTE NO METODO EM VEZ DE CRIAR A VARIAVEL

CONSUMER-> E UMA INTERFACE FUNCIONAL PARAMETRIZADA DO TIPO T, E UM METODO ABSTRADO CHAMADO ACCEPT, O ACCEPT RECEBE UM OBJETO DO TIPO T E E UM VOID, OU SEJA, EXECUTA ALGUMA ACAO E NAO RETORNA NADA
PARA IMPLEMENTAR O CONSUMER, TEMOS VARIAS VERSOES QUE SAO::
- IMPLEMNTACAO DA INTERFACE -> UMA CLASSE IMPLEMENTA A INTERFACE CONSUMER<NOME_CLASSE>
- REFERENCE METHOD COM METODO ESTATICO -> USANDO NOME_CLASSE::NOME_METHOD
- REFERENCE METHOD COM METODO NAO ESTATICO -> USANDO NOME_CLASSE::NOME_METHOD, UNICA DIFERENCA E NA HORA DE PROGRAMAR O METODO, POIS NO METODO STATICO TRABALHA COM UM OBJETO PASSADO POR PARAMETRO E N METODO NAO ESTATICO TRABALHA COM O PROPRIO OBJETO INSTANCIADO
- EXPRESSAO LAMBDA DECLARADA -> QUANDO CRIARMOS UMA VARIAVEL DO TIPO PEDICATE E USSAMOS A ARROW FUNCTION(EXPRESSAO LAMBIDA) E A LOGICA, PODENDO COLOCAR VALORES PARAMETRIZADOS
- EXPRESSAO LAMBDA INLINE -> FAZ O PROCEDIMENTO EM CIMA, SO QUE DIRETAMENTE NO METODO EM VEZ DE CRIAR A VARIAVEL

FOREACH -> PERCORRE A COLECAO
OBS1: PODEMOS USAR O REFERENCE METHOD NO FOREACH PARA PRINTAR ALGO, QUE E SYSTEM.OUT::PRINTLN
OBS2: NA EXPRESSAO LAMBDA PODEMOS UTILIZAR -> {LOGICA}, E OBRIGATORIO QUANDO TEM MAIS DE UMA LINHA NA LOGIGA DA EXPRESSAO

FUNCTION-> UMA INTERFACE FUNCIONAL QUE POSSUI 2 PARAMENTROS, UM TIPO T E UM TIPO R, ELA POSSUI UM METODO STATICO CHAMADO APPLY, QUE RECEBE UM T E RETORNA UM OBJETO DO TIPO RAPIDO
- IMPLEMNTACAO DA INTERFACE -> UMA CLASSE IMPLEMENTA A INTERFACE FUNCTION<NOME_CLASSE_ENTRDA, NOME_CLASSE_SAIDA>
- REFERENCE METHOD COM METODO ESTATICO -> USANDO NOME_CLASSE::NOME_METHOD
- REFERENCE METHOD COM METODO NAO ESTATICO -> USANDO NOME_CLASSE::NOME_METHOD, UNICA DIFERENCA E NA HORA DE PROGRAMAR O METODO, POIS NO METODO STATICO TRABALHA COM UM OBJETO PASSADO POR PARAMETRO E N METODO NAO ESTATICO TRABALHA COM O PROPRIO OBJETO INSTANCIADO
- EXPRESSAO LAMDA DECLARADA -> QUANDO CRIARMOS UMA VARIAVEL DO TIPO PEDICATE E USSAMOS A ARROW FUNCTION(EXPRESSAO LAMBIDA) E A LOGICA, PODENDO COLOCAR VALORES PARAMETRIZADOS
- EXPRESSAO LAMBDA INLINE -> FAZ O PROCEDIMENTO EM CIMA, SO QUE DIRETAMENTE NO METODO EM VEZ DE CRIAR A VARIAVEL

OBS1: A FUNCAO MAP(NAO CONFUNDA COM A ESTRUTURA DE DADOS MAP) E UMA FUNCAO QUE APLICA UMA FUNCAO A TODOS OS ELEMENTOS DE UMA stream
CONVERSORES:
- LIST PARA STREAM -> .STREAM() 
- STREAM PARA LIST -> .COLLECT(COLLECTORS.TOLIST())

OBS1: STREAM E UMA SEQUENCIA DE DADOS
OBS2: MAP APLICA A FUNCAO QUE ESTIVER NO SEU PARAMETRO A CADA ELEMENTO DA STREAM OU LISTA, POIS SEMPRE CONVERTERMOS STREAM E UMA OPERACAO MAIS RAPIDA
OBS3: DEVE-SE SEMPRE CONVERTER EM LIST PARA STREAM E DEPOIS O CONTRARIO

CRIANDO FUNCOES QUE RECEBEM FUNCOES COMO ARGUMENTO:

REMOVEIF(PREDICATE) -> O PREDICADO E UMA FUNCAO, QUE RECEBE UM OBJETO E RETORNA V OU FACA
FOREACH(CONSUMER)
MAP(FUNCTION)

OBS1: CRIAR FUNCOES QUE RECEBEM FUNCOES COMO ARGUMENTO E DE SUMA IMPORTANCIA POIS PODEMOS REALIZAR ALTERACOES NA FUNCAO ENVIADA DE FORMA FACIL E RAPIDA, NAO TENDO NECESSIDADE DE ALTERAR O CODIGO DE UMA CLASSE OU CRIAR OUTRA CLASSE PARA REALZIAR ESSA VERIRIFACAO, GERANDO UM PONTO RUIM DE MANUTENCAO
OBS2: PASSAMOS POR PARAMENTRO A FUNCAO ATRAVEZ DO TIPO PREDICATE<NOME_CLASSE> NOME_CRITERIO

SINXATEXE:
(LIST<NOME_CLASSE> NUME_VAR, PREDICATE<NOME_CLASSE> NOME_CRITERIO)

COM ISSO PODEMOS PASSAR UMA EXPRESAO LAMBDA POR PAREMTRO DA FUNCAO, FAZENDO COM QUE ALTERACOES SEJAM MAIS SIMPLES DE SE FAZER FAZENDO COM QUE A CLASSE FIQUE ABERTA A ALTERACOES DE MANEIRA SIMPES, PASSANDO APENAS UMA EXPRESSAO LAMBDA POR PARAMETRO

STREAM:

E UMA SEQUENCIA DE ELEMENTOS ADVINDA DE UMA FONTE DE DADOS QUE OFERECE SUPORTE A "OPERACOES AGREDADAS"
* FONTE DE DADOS: COLECAO, ARRAY, FUNCAO DE INTERACAO, RECURSO DE E/SABE

STREAM E UMA SOLUCAO PARA PROCESSAR SEQUENCIAS DE DADOS DE FORMA:
- DECLARIATIVA(INTERACAO INTERNA: ESCONDIDA DO PROGRAMADOR) -> VAI ESCREVER O QUE FAZER E O PROCESSAMENTO VAI SER FEITO INTERNAMENTE
- PARALLEL-FRIENDLY(IMULTAVEL -> THREAD SAFE) -> ELE PODE SER PARALEZALVE DE FORMA SEGURA
- SEM EFEITOS COLATERAIS 
- SOB DEMANDA(LAZY EVALUATION) -> QUANDO NECESSARIO

ACESSO SEQUENCIAL(NAO HA INDICES)


SINGLE-USE: SO PODE SER "USADA" UMA VEZ -> GERA EXECAO SE USAR 2X UMA STREAM

PIPE LINE: OPERACOES EM STREAMS RETORNAM NOVAS STREAMS ENTAO E POSSIVEL CRIAR UMA CADEIA DE OPERACOES(FLUXO DE PROCESSAMENTO)

OPERACOES INTERMEDIARIAS E TERMINAIS:

O PIPELINE COMPOSTO POR ZERO OU MAIS OPERACOES INTERMEDIARIAS E UMA TERMINAL
- OPERACAO INTERMEDIARIA:
* PRODUZ UMA NOVA STREAMS(ENCADEAMENTO)
* SO EXECUTA QUANDO UMA OPERACAO TERMINAL E INVOCADA(LAZY EVALUATION) - SO EXECUTA QUANDO UMA TERMINAL E INVOCADA
ALGUMAS OPERACOES INTERMEDIARIAS:
- FILTER
- MAP
- FLATMAP
- PEEK
- DISTINCT
- SORTED
- SKIP
- LIMIT(*)

OBS1: * SHOR-CIRCUIT -> CORTA A EXECUCAO QUANDO A CONDICAO E SATISFEITA

- OPERACAO TERMINAL:
* PRODUZ UM OBJETO NAO-STREAM(COLECAO OU OUTRO)
* DETERMINA O FIM DO PROCESSAMENTO DA STREAM
ALGUMAS OPERACOES TERMINAIS:
- FOREACH
- FOREACHORDERED
- TOARRAY
- REDUCE
- COLLECT
- MIN
- MAX 
- COUNT 
- ANYMATCH(*)
- ALLMATCHS(*)
- NONEMATCH(*)
- FINDFRIST(*)
- FINDANY(*)

OBS1: * SHOR-CIRCUIT -> CORTA A EXECUCAO QUANDO A CONDICAO E SATISFEITA

CRIAR UMA STREAM -> UMA STREAM E CRIADA A PARTIR DE UMA BASE DE DADOS
COM ISSO BASTA CHMAR O METODO .STREAM() OU .PARALLELSTREAM()(PARARELEL STREAM DISTRIBUI NOS NUCLEOS DE PROCESSAMENTO DA MAQUINA) A PARTIR DE QUALQUER OBJETO OLLECTION
- OUTRAS FORMAS DE SE CRIAR UMA STREAM INCLUEM:
* STREAM.OF 
* STREAM.OFNULLABLE
* STREAM.ITERATE

OBS1: TO ARRAY CONVERT DE STREAM PARA ARRAY
OBS2: AO USAR O STREMOF PODEMOS JA DECLARAR OS ELEMENTOS DA STREAM
OBS3: FUNCAO DE INTERACAO IREMOS PASSAR POR PARAMETRO O VALOR INICIAL, E DEPOIS UM PARAMETRO NO QUAI DEVE-SE DEFINIR O CRITERIO PARA POPOULACAO DA LISTA POR EXEMPLO ADD 1 A CADA ELEMENTO, POREM ELA PODE SE TORNAR INFINITA
OBS4: LIMIT MOSTRA O NUMERO MAXIMO DE ELEMENTOS
OBS5: OPERACAO INTERMEDIARA QUE IRA REALIAZR ALGUMA ACAO DEFINIDA POR UMA EPXRESSAO LAMBDA PARA CADA ELEMENTO DA STREAM
OBS5: REDUCE PEGA O VALOR INICIAL E UMA FUNCAO, VALRE RESALTAR QUE DEPENDEDO DA OPERACAO O VALOR INICIAL MUDAM
OBS6: FILTER FILTRA A LISTA COM ELEMENTOS QUE ATENDEM AQUELE PREDICADO