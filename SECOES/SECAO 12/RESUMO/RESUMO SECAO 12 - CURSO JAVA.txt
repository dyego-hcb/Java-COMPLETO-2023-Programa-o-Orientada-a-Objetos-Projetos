-- RESUMO SEÇÃO 12 - BONUS: NIVELAMENTO SOBRE GIT E GITHUB - DO CURSO JAVA COMPLETO 2023 PROGRAMAÇÃO ORIENTADA A OBJETOS + PROJETOS --

O GIT E UM SISTEMA DE VERSIONAMENTO, PARA CONTROLAR VERSOES DE ALGUM PROJETO DESENVOLVIDO OU EM DESENVOLVIMENTO.
ESSAS VERSOES, SAO ETAPAS DE DESENVOLVIMENTO DE ALGUM PROJETO, UM EXEMPLO CLASSICO PARA ESTUDANTES, O TCC
QUANDO DESENVOLVEMOS O TCC ENVIAMOS ETAPAS PARA O ORIENTADOR E O MESMO NO RETORNA UM FEEDBACK SOBRE O TEXTO, SE ESTA CORRETO OU NAO, PARA TERMOS TODAS AS VERSOES, DEVEMOS TER OS ARQUIVOS COM OS NOMES POR EXEMPLO:
TCC1-ETAPA1
TCC1-ETAPA1-CORRIGIDA
TCC1-ETAPA2+ETAPA1-CORRIGIDA
TCC1-ETAPA2+ETAPA1-CORRIGIDA-ETAPA2-CORRIGIDA
...
TCC1-FINAL

O EXEMPLO ACIMA ILUSTRA INUMERAS VERSOES DO TCC, ONDE A CADA ETAPA TEVE UM FEEDBACK E APOS O FEEBACK TEMOS AS CORRECOES, E TAMBEM TEMOS AS ETAPAS ANTERIORES PARA PEGAR ALGUMA IDEIA CASO NECESSARIO, OU VOLTAR A AQUELA VERSIONAMENTO

COM ISSO SURGIU O GIT, QUE E UM SISTEMA DE VERSIONAMENTO, ONDE TEREMOS DIVERSOS RECURSOS EM RELACAO AO VERSIONAMENTO DE PROJETO, POIS PODEMOS VOLTAR A UMA ETAPA, VER A DIFERENCAS DO INICIO E NO FINAL, FAZER COLABORACAO EM GRUPO, ETC.
OBS1: O GIT E UM SISTEMA NO COMPUTADOR PARA GERENCIAR O VERSIONAMENTO, O GIT E DIFERENTE DO GITHUB

GITHUB E UM SITE, DE REPOSITORIOS ONLINE PARA HOSPEDAGEM  DE PROJETOS GIT
OBS1: TEMOS O GILAB E BITBUCKET QUE SAO UMA ALTERNATIVA SEMELHANTE AO GITHUB, UM REPOSITORIO PARA HOSPEDAGEM DE PROJETOS GIT

GIT:

COMO DITO ANTERIORMENTE O GIT E UM SISTEMA DE VERSIONAMENTO, ONDE VOCE CONTROLA AS MODIFICACOES DE UM PROJETO POR MEIO DE VERSOES CHAMADS DE COMMITS.
EX:

(32183AB)------->(231JKJ21)-------->(123KJA89)
COMMIT 1          COMMIT 2          COMMIT 3

OBS1: CADA COMMIT E 1 VERSAO DO PROJETO

GITHUB:

COMO DITO ANTERIORMENTE E UM SERVICO DE HOSPEDAGEM DE REPOSITORIOS GIT REMOTOS, ONDE O GIT:
- POSSUI UMA INTERFACE GRAFICA WEB: github.COM
- E UMA PLATAFORMA SOCIAL(USUARIOS, PAG DE PERFIL, SEGUIDORES, COLABORACAO, ETC) -> MUITO USADO COMO CURRICULO
- MAIOR SERVICO DO MUNDO DE HOSPEDAGEM DE PROJETOS DE CODIGO ABERTO
- MODELO DE COBRANCA GRATUITO PARA PROJETOS DE CODIGOS ABERTO E PAGO PARA PROJETOS PRIVADOS
- ALTERNAVIAS: GITLAB, BITBUCKET, ETC

REPOSITORIO REMOTO E LOCAL:
UM PROJETO CONTROLADO PELO GIT E CHAMADO DE REPOSITORIO DE VERSIONAMENTO, OU SEJA, SEU HISTORICO DE EVOLUCAO DELE E CONTROLADO PELO GIR
TIPICAMENTE UMA COPIA "OFICIAL" DO REPOSITORIO FICA SALVO EM UM SERVIDOR(REPOSITORIO REMOTO)
CADA PRESSOA QUE TRABALHA NO PROJETO PODE FAZER UMA COPIA DO REPOSITORIO PARA O SEU COMPUTADOR(REPOSITORIO LOCAL).
A PESSOA ENTAO FAZ SUAS ALTERACOES NO PROJETO(NOVOS COMMITS(VERSOES)) E DEPOIS SALVA AS ALTERACOES NO SERVIDOR.
EX:
SERVIDOR:     S           S           S            S
            (...)       (...)       (...)       (.....)
                          |                        ^
                          |                        |  
                        (PCL                       |
                        PULL                   (PCL PUSH)
                         OR                        |
                        CLONE)                     |
                          V                        |
PC LOCAL:    PCL         PCL         PCL          PCL
            (   )       (...)      (.....)      (.....) 
                                    (PCL 
                                    2X COMMIT)

OBS1: (...) CADA . REPRESENTA AO NUMERO DE VERSOES NO SERVIDOR E PC LOCAL
OBS2: OS PC E SERVIDOR SAO APENAS 1 SO E PRESENTADO PELAS LETRAS S(SERVIDOR) E PCL(PCLOCAL), POREM PODEMOS TER N PROJETOS, POR ISSO PCL DEU O PULL ALI, PARA ATUALIZAR OS ARQUIVOS DO SEU REPOSTORIO, O GIT CLONE E QUANDO VOCE NAO TEM O REPOSITORI E A PRIMEIRA VEZ QUE VOCE VAI UTILIZAR
OBS3: O COMANDO PUSH SALVA O COMMIT OU VERSAO QUE ESTA NO SEU REPOSITORIO LOCAL PARA O SERVIDOR OU REPOSITORIO REMOTO DO GITHUB

EM SISTEMAS COMO MACOS E LINUX, GERALMENTE O GIT JA VEM INSTALADO, PARA VERIFICAR BASTA ABRI O CMD E DIGITAR O SEGUINTE COMANDO:
git
SE TIVE INSTALADO, VOCE RECEBERA A INFORMACAO DA VERSAO DO MESMO QUE ESTA INSTALADA EM SUA MAQUINA

PARA CONFIGURA O SEU USARIO DO GITHUB NO GIT, DEVEMOS FAZER O SEGUINTE

git config --global user.name "Seu Nome"
git config --global user.email "Seu email de cadastro do Github"

git config --list

NO WINDOWS, DEVEMOS HABILITAR A FUNCIONALIDADE DE VER ARQUIVOS OCULTOS, PARA ISSO DEVEMOS IR EM:
1- INICIAR -> OPCOES DO EXPLORADOR DE ARQUIVOS
2- DESMARQUE OCULTAR AS EXTENCOES DOS TIPOS DE ARQUIVOS CONHECIDOS
3- MARCAR MOSTRAR AQUIVOS, PASTAS E UNIDADES OCULTAS

CONFIGURAR CHAVE SSH PARA O GITHUB:

O SSH E UM PROTOCULO DE COMUNICACO DE DADOS COM SEGURANCA
O GITHUB ABOLIU A AUTENTICAO SOMENTO COM USARIO E SENHA, POIS COM SSH E MAIS SEGURO
A IDEIA BASICA E CADASTRAR PREVIAMENTE QUAIS COMPUTADORES PODEM ACESSAR O GITHUB EM SEU NOME, OUTROS PC NAO CONSEGUE ACESSAR.

PARA ISSO, DEVEMOS:
1- GERAR UMA CHAVE SSH NO SEU PC
PARA GERAR A CHAVE, BASTA SEGUIR O PASSO A PASSO NO DOC: https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent
2- CADASTRAR ESSA CHAVE NO SEU GITHUB
PARA CADASTRAR A CHAVE, BASTA SEGUIR O PASSO A PASSO NO DOC: https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account

OBS1: MAIS COISAS SOBRE SSH NO https://docs.github.com/en/authentication/connecting-to-github-with-ssh

PASSO A PASSO NO GIT:

- PASSO A PASSO PARA SALVAR A PRIMEIRA VERSAO DE UM PROJETO NO GIT HUB:

1- git init -> CRIA UM REPOSITORIO GIT NA PASTA
2- git add . -> ADICIONA TODOS OS AQUIVOS DA PASTA NUMA AREA CHAMADA STAGE PARA SALVAR A PROXIMA VERSAO
2.1 git status -> MOSTRA QUAIS ARQUIVOS PRECISAM SER SALVOS
3- git commit -m "*MSG DO COMMIT*" -> MSG EXPLICATIVA PARA SABER O QUE O FOI FEITO E REALMENTE SALVA A VERSAO
4- git branch -M main -> DEFINE UMA branch CHAMADA MAIN
5- git remote add origin git@github.com:*seu_usurio_no_github*/*nome_repositorio*.git -> ASSOCIA O PROJETO LOCAL NO SERVIDOR
6- git push -u origin main -> ENVIA PARA O GIT

Link do repositorio criado com o exemplo da aula: https://github.com/zebodexx/aula-git-curso-java-completo/tree/main

OBS: BASTA TROCAR O QUE TIVER ENTRE ** PELO NOME QUE FIZER SENTIDO

- PASSO A PASSO PARA SALVAR UMA NOVA VERSAO:

1- git status -> PARA MOSTRAR COMO ESTA O PROJETO
2- git add . -> JOGAR ARQUIVOS AREA STAGE
3- git commit -m "*MSG EXPLICATIVA*" -> SALVAR O COMMIT (VERSAO)
4- git push -> ENVIA PRO GITHUB

Link do repositorio com nova versoes adicionadas com o exemplo da aula: https://github.com/zebodexx/aula-git-curso-java-completo/tree/main

OBS1: BASTA TROCAR O QUE TIVER ENTRE ** PELO NOME QUE FIZER SENTIDO
OBS2: CONSEGUIMOS VER AS DIFERENCAS DAS VERSOES COMMITADAS NO GIT

- PASSO A PASSO PARA CLONAR E ALTERA UM REPOSITORIO QUE TEMOS PERMISSAO:

1- git clone git@github.com:*seu_usurio_no_github*/*nome_repositorio*.git -> DEVEMOS USAR O GIT CLONE PARA BAIXAR O HISTORICOS DE VERSOES TAMBEM, NAO E VIAVEL BAIXAR APENAS O ZIP POIS ELE SO TRAS OS CODIGOS FONTES
2- git add .
3- git commit -m "*MSG EXPLICATIVA*"
3.1 - git log -> MOSTRA TODAS AS VERSOES QUE EXISTEM NO PROJETO
4- git push

OBS1: O GIT CLONE PODEMOS USAR O LINK MESMO HTTP OU O SSH, MAIS VIAVEL USAR O SSH POIS TEMOS UMA CHAVE CADASTRADA
OBS2: SE NAO DERMOS O PUSH, NAO E ENVIADO A VERSAO COMMITADA, O SERIVDOR FICA COM UMA VERSAO DESATUALIZADA EM REALACAO AO PC LOCAL

Link do repositorio clonado e editado com o exemplo da aula: https://github.com/zebodexx/aula-git-curso-java-completo/tree/main

- PASSO A PASSO PARA VERIFICAR O HISTORICOS DE VERSOES:

1- git log -> MOSTRA TODO O HISTORICO DE VERSOES
2- git log --oneline -> MOSTRA DE FORMA RESUMIDA O HISTORICO DE VERSOES, UTILZIADO QUANDO TEM MUITAS VERSOES

OBS1: HEAD-> MAIN REPRESENTA QUE E A ULTIMA VERSAO EM SUA MAQUINA
OBS2: ORIGIN/MAIN, ORIGIN/HEAD REPRESENTA QUE E A ULTIMA VERSAO SALVA NO SERVIDOR

- ENTENDENDO O GIT STATUS, GIT ADD E STAGE

1- git status -> MOSTRA O STATUS DO PROJETO, COMO ELE ESTA NO MOMENTO, SE TEM ALGO PARA MODIFICADO OU NAO, POREM ELES PODEM TER 3 SITUACOES DE ARUQIVOS QUE SAO:
1.1 modified -> ARQUIVOS MODIFICADOS
1.2 untrackde -> ARQUIVOS NOVOS NAO SALVOS
1.3 deleted -> ARQUIVOS DELETADOS

OBS1: AO DAR O GIT STATUS, O MESMO MOSTRA QUAL SITUACAO OCORREU COM O ARQUIVO, O MESMO PODE RECEBER ALGUMAS DAS 3 CITADAS ACIMA

2- git add -> O GIT ADD ADICIONA TODO OS ARQUIVOS NA AREA DE STAGE
2.1 git reset -> TIRA DO STAGE

OBS1: SE OS ARQUIVOS TIVEREM A MESMA ESTRUTRA, O GIT ACUSA QUE SE UM FOI DELETADO E CRIA UM BASICAMENTE IGUAL ACUSA QUE FOI RENOMEADO

3- STAGE -> STAGE EXISTE PARA CONTROLAR SOMENTE O QUE VOCE QUER SALVAR EM UMA VERSAO, POR EXEMPLO SALVAR APENAS 3 COMMITS EM 1X E DEPOIS EM OUTRO COMMIT SALVAR MAIS 4 ALTERACOES FEITAS NA HORA
3.1 git add nome_arquivo -> ADICIONA UM ARQUIVO ESPECIFICO NO STAGE

- COMANDO GIT DIFF

ESSE COMANDO MOSTRA A DIFERENCA ENTRE OS AQUIVOS MODIFICADOS

1 git diff nome_arquivo -> MOSTRA A DIFERENCA EM VERDE E AS LINHAS ADD E VERMELHAS AS LINHAS DELETADAS

OBS1: UTILIZA O VS CODE QUE MOSTRA GRAFICAMENTE AS DIFERENCAS, INDO EM SOURCE CONTROL, CHANGES E CLICKA NO ARQUIVO.

- GIT CHECKOUT

PERMITE MODIFICAR TEMPORARIAMENTE OS ARQUIVOS DO PROJETO AO ESTADO DE UM DADO COMMIT OU BRANCH 

CODIGO DO COMMIT, HEAD:
CADA COMMITE POSSUI UM CODIGO, QUE PODE SER UTILIZADO PARA REFERENCIAR O COMMIT, AO USAR O GIT LOG CONSEGUIMOS VISULAR O CODIGO NO TERMINAL E NO SITE DO GITHUB
O ULTIMO COMMIT DO HISTORICO DO BRANCH CORRENTE TAMBEM PODE SER REFERENCIADO PELA PALAVRA HEAD
E POSSIVEL REFERENCIA UM COMMIT N VERSOES ANTES DO HEAD USANDO ~N, POR EXEMPLO
* HEAD~1 (PENULTIIMO COMMIT)
* HEAD~2 (ANTEPENULTIMO COMMIT)

OBS1: O GITCHEKOUT ELE VAI A UM DETERMINADO COMMIT E ALTERA OS ARQUIVOS

IMPORTANTE !!!: ANTES DE SE FAZER O CHACKOUTE PARA VOLTAR PARA HEAD, CERTIFIQUE-SE DE QUE NAO HAJA MUDANCAS NOS ARQUIVOS, POIS ESSAS MUDANCAS SERAO PERDIDAS, SE ACIDELTALMENTE MUDAR ALGUMA COISA, DESFACAS AS MODIFICACOES USANDO OS COMDANOS:

1 git reset -> TRIDA DO STAGE
2 git clean -df -> LIMPA AS DIFERENCA
3 git checkout -- . -> VOLTA A ANTERIOR

- ARQUIVO GIT IGNORE:

O ARQUIVO GIT IGNORE E UM ARQUIVO QUE INDICA O QUE NAO DEVE SER SALVO PELO GIT, GERALMENTE O ARQUIVO GIT IGNORE FICA SALVO NA PASTA PRINCIPAL DO REPOSITORIO MAS TAMBEM E POSSIVEL SALVAR OUTROS ARQUIVOS GITIGNORE EM SUBPASTAS DE REPOSITORIO PARA INDICAR O QUE DEVE SER INGORADO POR CADA SUBPASTA.

OB1: PARA ENCONTRAR O QUE IGNORA DE CADA LINGUAGEM, BASTA PESQUISAR .gitignore O NOME DA LINGUAGEM

CASOS COMUNS DE ARQUIVOS QUE NAO DEVEM SER SALVOS PELO GIT:
1- ARQUIVOS COMPILADOS -> LINGUAGEUNS COMPILADAS (C,C++, JAVA, ETC) GERAM CODIGOS COMPLIADO PARA EXECUTAR O PROGRAMA LOCALMENTE
2- ARQUIVOS DE BIBLIOTECAS EXTERNAS USADAS NO PROJETO -> PROJETO REAIS UTILIZAM BIBLIOTECAS EXTERNAS(PROGRAMS PONTOS DISPONIVES NA INTERNET), POR EXMPLO PROJETOS JS COM NPM TIPICAMENTE SALVAM UMA SUBPASTA "NODE_MODULES" NA PASTA DO SEU PROJETO.
3- ARQUIVOS DE CONFIGURACAO DA SUA IDE: IDES PODEM SALVAR UMA SUBPASTA COM ARQUIVOS DE CONFIGURACAO NA PASTA DO PROJETO EX .VSCODE
4- ARQUIVOS DE CONFIGURACAO DO SEU SISTEMA: POR EXEMPLO MACOS PODEM GRAVA UMA SUBSTAS .DS_STORE NA PASTA DO PROJETO

- PASSO A PASSO PARA REMOVER ARQUIVOS DA AREA DE STAGE:

1 git status -> VERIFICAR O STATUS DO PROJETO, SEMPRE FAZER ISSO
2 git reset -> TIRA DO STAGE

- PASSO A PASSO PARA DESFAZER MODIFICACOES NAO SALVAS:

1 git status -> VERIFICA STATUS DO PROJETO
2 git reset -> TIRA DO STAGE
3 git clean -df -> LIMPA AS DIFERENAS
4 git checkout -- . -> VOLTA A VERSAO ANTERIOR

OBS1: UTILIZADO PARA VOLTAR PARA O ULTIMO COMMIT

- O QUE FAZER QUANDO ABRE O EDITOR VIM:
EDDAS ACOES PODEM ABRIR UM EDITOR VIM NO TERMINAL:
1 FAZER UM COMMIT SEM MENSAGENS -> ABRE O EDITOR VIM E PEDE PARA COLOCAR UMA MENSAGEM, E PARA ESCREVER TEMOS QUE FAZER O PASSO A PASSO ABAIXO
2 FAZER UM MERGE DE TRES VISULAR

HABILITAR O MODO DE EDICAO: i
SAIR DO VIM SALVANDO AS ALTERACOES: :wq
SAIR DO VIM DESCARTANDO AS ALTERACOES: :q!

OBS1: SE FOR DA MSG ELE TE OBRIGA A DIGITAR A MSG DO COMMIT BASTA COLOCAR A MSG E SALVAR COMO WQ

- COMO DESFAZER O ULTIMO COMMIT:
ABAIXO SEGUE OS COMANDO PARA DESFAZER O ULTIMO COMMIT SEM DESFAZER AS MODIFICACOES NOS AQRUIVOS:

1 git status
2 git reset --soft HEAD~1 -> VOLTAR PARA O COMMIT ANTERIOR O --SOFT NAO APAGA AS MODIFICACOES

- COMO DELETAR COMMITS E TAMBEM MODIFICACOES NOS ARQUIVOS:

VOLTAR O PROJETO AO ESTADO DE UM DADO COMMIT (DELETAR COMMITS E ALTEACOES POSTERIORES A ESSE COMMIT):

1 git status
2 git reset --hard <*codigo_do_commit*> -> O --HAR REALIZA ESSA DELECAO COMPLETA E RETORNA A AQUELE COMMIT

OBS1: BASTA COLOCAR O VALOR CORRESPONDENTE ENTRE OS **

VOLTAR O PROJETO AO ESTADO DO PENULTIMO COMMIT:

1 git status
2 git reset --hard HEAD~1

OBS2: E UMA ACAO DESTRURIVA, PORTANTO CUIDADO !!!!!

- COMO ATUALIZAR O REPOSITORIO LOCAL EM RELACAO AO REMOTO:

1 git status -> 
2 git pull <nome_remote> <nome_branch> -> TRAS DO REMOTO PARA O LOCAL

OBS1: MUITO USADO QUANDO SE TRABALHA EM EQUIPE, DEVE-SE DAR GIT PULL TODOS OS DIAS ANTES DE MECHER NO CODIGO

- COMO RESOLVER PUSH REJEITADO (PROBLEMA MUITO COMUM):

NAO E PERMITIDO ENVIAR UM PUSH SE SEU REPOSITORIO LOCAL ESTA ATRADA EM REALACAO AO HISTORICO DO REPOSITORIO REMOTO, POR EXEMPLO

NO GITHUB = (213ADSA)------>(123123IXAS)-------->(212321BBB)
NO SEU PC = (213ADSA)------>(123123IXAS)-------->(123123AAAS)-------->(C212313)

VOCE PRCEISA ATUALIZAR O REPOSITORIO LOCAL COM O GIT PULL VISTO ANTERIORMENTE

AO TRAZER UM COMMIT NO MEIO DO CAMINHO, ABRE O VIM PARA COLOCAR O NOME DO COMMIT, POIS SERA UM MERGE COM OS OUTROS COMMITS.
BASTA DAR ENTRER E SALVAR COMO WQ, CASO SEJA ARQUIVOS DIFERENTES MODIFICADADOS, CASO SEJA IGUAL TERA OUTRO TRATEMENTO, QUE SERA ABORDADO ABAIXO

- RESOLVENDO CONFLITO:
ACONTECE UM CONFLITO QUANDO TEMO 2 HISTORICOS DIFERENTES E OS 2 HISTORICOS MECHERAM NO MESMO ARQUIVO

1 ANALISE O CODIGO FONTES -> VE QUAL E O CERTO
2 FACA AS EDICOES NECESSARIAS -> TIRA O CODIGO ERRADO
3 FACA UM NOVO COMMIT -> SO COMMITAR NOVAMENTE PARA RESOLVER O CONFLITO, OS OUTROS COMMITES APARECEM TAMBEM

- COMO SOBRESCREVER UM HISTORICO NO GITHUB

NO GITHUB = (213ADSA)------>(123123IXAS)-------->(212321BBB)
NO SEU PC = (213ADSA)------>(123123IXAS)-------->(123123AAAS)-------->(C212313)

1 git push -f <nome_remote> <nome_branch> -> -F SERVE PARA FORCAR UMA ACAO DE IR PARA AQUELE COMMIT, DESTRUINDO TUDO QUE ESTA ACIMA

OBS1: ESSA E UMA ACAO DESTRUTIVA, UMA VEZ FEITA PERDE TUDO !!!!!!!!!!

- COMO APONTAR O PROJETO PARA OUTRO REPOSITORIO REMOTO:

1 get remote set-url origin git@github.com:*seu_usurio_no_github*/*nome_repositorio*.git -> TROCOU A REFERENCIA DO ORIGIN

OBS1: BASTA COLOCAR O VALOR CORRESPONDENTE ENTRE OS **