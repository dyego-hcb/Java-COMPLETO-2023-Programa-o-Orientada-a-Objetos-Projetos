-- RESUMO SEÇÃO 15 - TRATAMENTO DE EXECOES - DO CURSO JAVA COMPLETO 2023 PROGRAMAÇÃO ORIENTADA A OBJETOS + PROJETOS --

EXECOES:

UMA EXCECAO E QUALUQER CONDICAO DE ERRO OU COMPORTAMENTO INESPERADO ENCONTRADO POR UM PROGRAMA EM EXECUCAO

EM JAVA, UMA EXCECAO E UM OBJETO HERDADO DA CLASSE:
- JAVA.LANG.EXCEPTION -> O OCMPILADOR OBRIGA A TRATAR OU PROPAGAR
- JAVA.LANG.RUNTIMEEXCEPTION -> O COMPILADOR NAO OBRIGA A TRATAR OU PROPAGAR

QUANDO LANCADA, UMA EXCECAO E PROPAGADA NA PILHA DE CHAMADAS DE METODOS EM EXECUCAO, ATE QUE SEJA CAPTURADA(TRATADA) OU O PROGRAMA SEJA ENCERRADO


TRHOWABLE E A CLASSE GENETICA, NO TOPO DA HIERARQUIA
ERROR -> SUBCLASSE DA TRHOWABLE, ONDE SAO ERROS QUE NAO SE ESPERAM QUE O PROGRAMA E/OU PROGAMADOR VAI TRATAR, POREM NAO E OBRIGADO
EXECPTION -> SUBCLASSE DA TRHOWABLE, SAO ERROS QUE SE ESPERA QUE O PROGRAMADOR VAI TRATAR, COMO POR EXEMPLO ACESSAR UMA POSICAO QUE NAO EXISTE EM UMA LISTA

PORUQ EXCECOES?

O MODELO DE TRATAMENTO DE EXCECOES PERMITE QUE ERROS SEJAM TRATADOS DE FORMA CONSISTENTE E FLEXIVEL, USANDO BOAS PRATICA

VANTAGENS:
- DELEGA A LOGICA DO ERRO PARA A CLASSE RESPONSAVEL POR CONHECER AS REGRAS QUE PODEM OCASIONAR O ERRO -> POR EXEMPLO SACAR O DINHEIRO DA CONTA, TEM QUE TER DINHEIRO NA CONTA, TEM QUE TER LIMITE DE SAQUE, A CLASSE CONTA QUE E RESPONSAVEL POR ISSO, POR ISSO CRIAR EXECOES EM CLASSES
- TRATA DE FORMA ORGANIZADA (INCLUSIVE HERARQUICA) EXCECOES DO TIPOS DIFERENTES -> UMA OPERACAO PODE CAUSA VARIOS TIPOS DE EXECAO, OU SEJA, UMA CLASSE, FAZENDO COM QUE SEJA POSSIVEL ORDENAR COMO AS EXECOES VAI SER TRATADA A PARTIR DE CADA TIPO DE EXECAO
- A EXCECAO PODE CARREGAR DADOS QUAISQUER -> COMO E CLASSE PODE TER ATRIBUTOS

ESTRUTURA TRY-CATCH:

BLOCO TRY:
- CONTEM O CODIGO QUE REPRESENTA A EXECUCAO NORMAL DO TRECHO DE CODIGO QUE PODE ACARRETAR EM UMA EXCECAO

BLOCO CATH:
- CONTEM O CODIGO A SER EXECUTADO CASO UMA EXECAO OCORRA
- DEVE SER ESPECIFICADO O TIPO DA EXCECAO A SER TRATADA (UPCASTING E PERMITIDO(EXECAO GENERICA QUE PEGA VARIAS EXECOES AO MESMO TEMPO))

SINTAXE:

try
{

}catch(Exception e)
{

}
catch(Exception e)
{
    
}

OBS1: CADA CATCH PEGA UMA POSSIVEI EXECAO, CADA EXECPTION REPRESENTA UMA POSSIVEL ESSECAO
OBS2: CATCH E CAPTURA, ACONTECEU ALGO NO TRY O CATH PEGA/CAPTURA
OBS3: QUANDO UMA EXECAO E CAPTURADA, PARA O PROGRAMA, POREM QUANDO TRATAMOS A EXECAO, PODEMOS CONTINUAR A EXECUCAO DO PROGRAMA
OBS4: AO CAPTURA UMA EXCECAO, DEVE-SE MOSTRAR UMA MSG QUE FACA SENTIDO PARA SABER O QUE DISPAROU AQUELA EXECAO
OBS5: POR PADRAO NO JAVA QUANDO UMA EXECAO E CAPTURADA PARA O PROGRAMA

PILHA DE CHAMADAS DE METODOS: -> MOSTRA OS METODOS OU FUNCOES QUE CHAMARAM AQUELE METODO QUE ACARRETOU UMA EXECACAO, E MOSTRA EM QUAL LINHA TAMBEM

printStackTrace() -> MOSTRA A SEQUENCIA DE CHAMDAS QUE GEROU AQUELA EXECAO, EM QUAIS LINHAS QUE OCORRERAM, QUAL NOME DA FUNCAO

BLOCO FINALLY:

E UM BLOCO QUE CONTEM CODIGO A SER EXECUTADO INDEPENDENTEMENTE DE TER OCORRIDO OU NAO UMA EXCECAO
EXEMPLO: FECHAR UM ARQUIVO, CONEXAO DE BANCO DE DADOS, OU OUTRO RECURSO ESPECIFICO AO FINAL DE SEU PROCESSAMENTO.
SINTAXE:

try{

}catch(Exception e)
{

}finally{

}

OBS1: O QUE TA DENTRO DO FINALLY VAI SER EXECUTADO INDEPENDENTEMENTE SE O QUE TA NO TRY DEU CERTO OU NAO, OU SEJA, NAO DISPAROU NENHUMA EXECAO
OBS2: A CLASSE FILE ABRE ARQUIVOS DO COMPUTADOR
OBS3: A CLASSE SCANNER TAMBEM PODE LER ARQUIVOS COMO ENTRADA
OBS4: HASNEXTLINE SERVE PARA PERCORRER AS LINHAS DO ARQUIVO
OBS5: .GETMESSAGE MOSTRA A MESNAGEM DO ERRO QUE DEU NA EXECAO

SUGESTAO DE PACOTE MODEL:

PACOTE MODEL -> APLICACOES MVC, POSSUIE 3 MODULOS, O VIEW QUE A INTERFACE, O MODEL QUE REPRESENTA OS DADOS DO SISTEMA E AS TRANSFORMACOES DESSES DADOS CONFORME AS REGRAS DE NEGOCIOS

MODEL
|
|_ ENTITIES -> ENTIDADES DE NEGOCIOS E REGRAS DE NEGOCIOS
|
|_ ENUMS
|
|_ EXCEPTION
|
|_ SERVICES

OBS1: SEGUIR ESSE PADRAO DE ESTRUTRA PARA O MODULO MODEL DO PADRAO MVC
OBS2: TIMEUNIT.CONVET CONVERT EM MILISEGUNDOS PARA DIAS, MESES, ANOS, ETC

THROWS PARSEEXECPTION -> QUANDO ADICIONA ESSA CLAUSULA NO METODO MAIN, VOCE ESTA DIZENDO QUE NAO TEM QUE TRATAR ESSA EXECAO COM O TRYCATCH, OU SEJA A EXECAO DEVERA SER PROPAGADA
A VERSAO MUITO RUIM, TODAS AS VERIFICACOES SAO FEITA NA MAIN, ISSO E MUITO RUIM POIS A MAIN DEVE SER MANTER O MAIS LIMPO POSSIVEL, TODAS AS VERIFICACOES DEVEM SER FEITAS PELAS CLASSES QUE NECESSITAM DAQUELA VERIFICACAO
OBS1: VERSAO MUITO RUIM POIS NAO HOUVE DELEGACAO DE RESPONSABILIDADE, QUEM DEVE FAZER A LOGICA DE VALIDACAO PARA A CLASSE RESERVA E NAO NA CLASSE MAIN OU OUTRAS CLASSES QUE NAO TENHAM NADA HAVER COM AQUELA VALIDACAO
A VERSAO RUIM, TEVE AS VALIDACOES DE DATAS FEITAS NA CLASSE RESERVATION, DELEGANDO ASSIM SUAS OBRIGACOES PARA VALIDAR ALGUMAS CONDICOES, POREM AINDA NAO E A MELHOR SOLUCAO POIS AINDA ESTAMOS UTILIZANDO A PROPAGACAO DE EXECOES, ESSAS EXECOES DEVEM SER TRATADAS UTILIZANDO OS TRY-CATCH PARA OBTERMOS UMA BOA SOLUCAO
OBS2: NESSA SOLUCAO RUIM, NAO TIRAMOS TODAS AS VALIDACOES DA MAIN POIS IREMOS ALTERAR O CONTRUTOR NA RESOLUCAO BOA, POIS O CONSTRUTOR NAO RETORNA STRING E SIM UM OBJETO, POR ISSO NAO TEVE JEITO DE TIRAMOS ESSA VERIFICACAO
OBS3: PARA ACESSAR AS VERSOES DOS COMMITS NO GITHUB, DEVEMOS IR EM COMMITS E CLICKCAR NA VERSAO E VERIRICAR O QUE MUDOU, VERMELHO FOI REMOVIDO E VERDE ACRESCENTADO
OBS4: OBS AO CLICKAR EM BROWSE FILES CONSEGUIMOS ACESSAR OS CODIGOS DAS VERSOES ANTIGAS
A SOLUCAO BOA, IREMOS TIARA TODA A LOGICA DE VERIFICACAO DA MAIN, E DELEGARMOS PARA A CLASSE RESERVATION E IREMOS TRATAR AS EXECOES, IREMOS TIRAR O TROW PARSEEXECPTION POIS IREMOS TRATAR AS EXECOES E NAO DEIXARMOS A MESMAS SEREM PROPAGADAS.
OBS1: DEVEMOS COLOCAR TODO O CODIGO QUE POSSIVELMENTE PODERA DISPARAR UMA EXECAO, E NO CATCH DEVEMOS COLOCAR QUAIS AS POSSIVEIS EXECOES QUE PODEM SER DISPARADAS, COMO POR EXEMPO PARSE EXECTION QUE E UMA DATA INVALIDA
OBS2: NOS METODOS DA CLASSE, CASO ACONTECE ALGUM ERRO DEVEMOS LANCAR UMA EXECAO, PARA LANCAR UMA EXECAO USAMOS O TROHW NEW NOME_EXECAO, O NOME DE EXECAO DEPENDERA DA EXECAO QUE PODERA SER DISPARADA
OBS3: CADA BLOCO CATHC REPRESENTA UMA POSSIVEL EXECAO QUE PODE SER DISPARADA
OBS4: O GETMESSEGE MOSTRA A MESNAGEM QUE FOI DEFINIDA PELO PROGRAMADOR AO DISPARAR AQUELA EXECAO
OBS5: PODEMOS CRIAR NOSSAS PROPRIAS EXECOES, POR BOAS PRATICAS DEVEMOS CRIAR AS EXECOES NO PACOTE MODEL.EXECPTIONS E COLOCAR SEMPRE EXCEPTION NO FINAL DO NOME DA CLASSE VISANDO BOAS PRATICAS DE PROGRAMACAO
OBS6: DEVEMOS DAR EXTENDS NA CLASSE EXCEPTION E/OU RUNTIMEEXCEPTION
OBS7: AO CRIARMOS UMA EXECAO PRORIA, DEVEMOS CRIAR UM CONSTRUTIR QUE RECEBE UMA MSG E PASSA ESSA MSG PARA O SUPER CONSTRUTOR DA CLASSE PAI, QUE SERA EXECPTION OU RUNTIMEEXCEPTION
OBS8: A STRING CITADA ACIMA E NECESSARIA POIS IREMOS INFORMAR O QUE DISPAROU NA EXECAO 
OBS9: DEVEMOS SEMPRE INSTANCIAR UM OBJETO DA EXECAO CRIADA, ONDE SERA FEITA A VALIDACAO E PASSAR A MENSENGEM, NO EXEMPLO DA AULA, TIVEMOS QUE COLOCAR O TRHOWS POIS ELA SERA TRATADA DE ACORDO COM O A ENTRADA DO USUARIO NA MAIN, FAZENDO COM QUE ADICIONAMMOS MAIS UMA CLAUSULA CATCH NA MAIN, PASSANDO POR PARAMETRO A NOSSA EXECAO CRIADA PARA QUE CASO DISPARE ALGUMA EXECAO NAQUELE METODO MOSTRAR A MSG
A SOLUCAO BOA, TRATO TODAS AS POSSIVEIS EXECOES EM TEMPO DE EXECUCAO, AO CAPTURAR ALGUMA EXECAO, O PROGRAMA CONTINUA RODANDO ATE FINALIZAR E MOSTRA OS ERROS QUE FORA ENCONTRADOS SEM ENCERRAR O PROGRAMA, CASO NAO SEJA TRATADAS AS EXECOES, O PROGRAMA ENCERRA
OBS10: AO UTILIZA TRY-CATCH PARA TRATAR AS EXECOES, FAZ COM QUE NOSSO CODIGO FIQUE LIMPO
OBS11: CRIAR EXECOES E MUITO ESSENCIAL, POIS HA VARIOS TIPOS DE EXECOES QUE PODEM OCORRER EM DIFERENTES CENARIOS, COM ISSO A CADA CENARIO TEREMOS ALGUM TIPO DE EXECAO, ONDE PODEMOS CRIAR E MANIPULAR EXECOES, PARA QUE O PROGRAMA NAO QUEBRE
OBS12: EXECOES COM RUNTIMEEXCEPTION NAO E NECESSARIO UTILIZAR O TRHOWS, POIS ELA NAO E OBRIGADO A TRATAR NA CLASSE 
OBS13: SE TIRAR A CLAUSLA CATHC, E ALGUMA EXECAO FOR CAPTADA, O PROGRAMA QUEBRA, OU SEJA, ELE ENCERRA
OBS14: E SEMPRE BOM UTILIZAR TRATAMENTO DE EXECOES PARA EVITAR QUE O PROGRAMA QUEBRE

RUNTIMEEXCEPTION -> TIPO DE EXECAO QUE O COMPILADOR NAO E OBIRGADA A TRATAR, POREM SE NAO ADICIONAR A EXECAO QUE PODE SER CAPTURADA NA CLAUSA CATCH QUEBRA O PROGRAMA
EXECPTION -> E OBRIGATORIO A TRATAR NA CLASSE COM O TRY-CATCH -> ERRO DO PARSEEXEPTION DEVE SER TRATADOS
SERIALIZIBLE -> OS OBJETOS DESSE CLASSE PODEM SER CONVERTIDOS EM BITS E TRAFEGAR EM REDES, SER GRAVADOS EM ARQUIVOS, ETC, EXCAPTION E SERIALIBE

SINTAXE DE UMA SERIALIZIBLE -> PRIVATE STATIC FINAL LONG SERIALVERSIONUID = 1L

SOLUCAO 1(MUITO RUIM)-> A LOGICA DE VALIDACAO FOI FEITA NO PROGRAMA PRINCIPAL, ESSA LOGICA DE VALIDACAO DEVERIA SER DELEGADA A CLASSE RESERVATION, VISTO QUE A CLASSE QUE DELEGA RESERVAS, ENTAO A PROPRIA CLASSE DEVE SABER SUAS REGRAS DE VALIDACAO
SOLUCAO 2(RUIM)-> RETORNANDO STRING -> SEMANTICA DA OPERACAO E PREJUDICADA, POIS RETORNAR STRING NAO TEM NADA VER COM A ATUALIZACAO DA RESERVA.
E SE TIVESSE QUE RETORNAR STRING NA OPERACAO? IRIA DAR UM CONFLITO
NAO E POSSIVEL TRATA EXECOES EM CONSTRUTORES
NAO HA AUXILIO DO COMPILADOR -> O PROGRAMADOR DEVE LEMBRAR DE VERICAR SE HOUVER ERRO
LOGICA ESTRUTRADA EM CONICIONAIS ANINHADAS IF ELSE IF ELSE FICANDO MUITO BAGUNCADO
SOLUCAO 3(BOA)-> TRATAMENTOS DE EXECOES, DEIXA O PROGRAMA RODAR SEM FINALIZA-LO

CLAUSULA THROWS -> PROPAGA A EXECAO AO INVES DE TRATALA
CLAUSULA THROW -> LANCA A EXECAO E CORTA O METODO
EXCEPTION -> COMPILADOR OBRIGA A TRATAR OU PROPAGAR
RUNTIMEEXCEPTION -> COMPILADOR NAO OBRIGA

O MODELO DE TRATAMENTO DE EXECOES PERMIQUE QUE ERROS SEJAM TRATADOS DE FORMA CONSISTENTE E  FLEXIVELM USANDO BOAS PRATICAS
VANTAGENS:
- LOGICA DELEGADA
- CONSTRUTORES PODEM TER TRATAMENTOS DE EXECOES
- POSSIBILIDADE DE AUXILIO DO COMPILADOR (EXCEPTION)
- CODIGO MAIS SIMPLES, NAO HA ANINHAMENTO DE CONDICIONAIS A QUALQUER MOMENTO QUE UMA EXECAO FOR DISPARADA, AEXECUCAO E INTERROMPIDA E CAI NO BLOCO CATHC CORRESPONDENTE
- E POSSIVEL CAPUTAR INCLUSIVE OUTRAS EXECOES DE SISTEMA